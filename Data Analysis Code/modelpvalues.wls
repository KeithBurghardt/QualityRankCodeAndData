#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Input:: *)
(*guesses=Import["~/Dropbox/ExpFiles/turk/parsed_data/guesses_by_q.csv"];*)
(*flippedguesses =Table[If[i<4, (If[0<#<1,1./#,#]&/@guesses[[i]])//Sort,guesses[[i]]],{i,10}];*)
(*filteredguesses = Table[Select[Qguesses,(#>=1 && #<10^6)&],{Qguesses,flippedguesses}];*)
(*(*No thrill sigmas and mus*)*)
(*logguesses=Table[Table[Log[g],{g,Qguesses}],{Qguesses,filteredguesses}];*)
(*pars=Table[FindDistributionParameters[Qlogguesses,NormalDistribution[\[Mu],\[Sigma]]],{Qlogguesses,logguesses}];*)
(*truevals=Log[{2.91393123655,2.11605429697,4.27852,2.24069551,47,476,347,568,2069,312}];*)
(*\[Mu]s1=Table[\[Mu]/.par,{par,pars}];*)
(*\[Sigma]s1=Table[\[Sigma]/.par,{par,pars}];*)
(*(*Only lower cutoff at \[GreaterEqual]1*)*)
(*LB=-0.0001;*)
(*logguesses2= Table[Select[Qlogguesses,#>LB&],{Qlogguesses,logguesses}];*)
(*lowertruncdist=TruncatedDistribution[{LB,Infinity},NormalDistribution[\[Mu],\[Sigma]]];*)
(*pars=Table[FindDistributionParameters[Qlogguesses,lowertruncdist],{Qlogguesses,logguesses2}];*)
(*\[Mu]s2=Table[\[Mu]/.par,{par,pars}];*)
(*\[Sigma]s2=Table[\[Sigma]/.par,{par,pars}];*)
(*Do[*)
(*filename=StringJoin["~/Dropbox/ExpFiles/turk/parsed_data/allexp-"<>rank<>"rankedchoice-results.csv"];*)
(*g=Import[filename,HeaderLines->1];*)
(*cans={2.91393123655,2.11605429697,4.27852,2.24069551,47,476,347,568,2069,312};*)
(*bootstrap[probfunc_,llfunc_,data_,n_, fitll_]:=*)
(*Module[{samps,lls},*)
(*samps=BSsamples[probfunc,data,n];*)
(*lls=BSlls[llfunc,samps];*)
(*hist=Histogram[lls,Automatic,"Probability",PlotRange->{{Min[Join[lls,{fitll}]]-100,Max[Join[lls,{fitll}]]+100},Automatic},AxesLabel->{"Log Likelihood","Probability"}];*)
(*Print[Show[hist,Graphics[{Red,Thick,HalfLine[{{fitll,0},{fitll,.1}}]}]]];*)
(*{lls,Count[lls,x_/;x<fitll]/Length[lls]}*)
(*];*)
(**)
(**)
(*Do[*)
(**)
(*(*#[[2]]>4 is just the dot questions; #[[2]]<4 is just the ratio*)*)
(*nsamp=Length[f];*)
(*BSsamples[probfunc_,xs_,n_]:=Table[Table[{x[[1]],x[[2]],RandomVariate[BinomialDistribution[1,probfunc[{x[[1]],x[[2]],1,x[[4]]}]],1][[1]],x[[4]]},{x,xs}],{idx,n}];*)
(*BSlls[LL_,samples_]:=Table[LL[sample],{sample,samples}];*)
(**)
(*f={Select[g,(#[[2]]>0&& #[[3]]>0 && #[[4]]>0 && #[[3]]!=#[[4]])&],Select[g,(#[[2]]>4&& #[[3]]>0 && #[[4]]>0 && #[[3]]!=#[[4]])&],*)
(*Select[g,(#[[2]]<4&& #[[3]]>0 && #[[4]]>0 && #[[3]]!=#[[4]])&]}[[ff]];*)
(*\[Mu]s={\[Mu]s1,truevals}[[mu]];(*truevals*);(*\[Mu]s1 is simply calculating the parameteres of the lognormal; \[Mu]s2 is using lognormal with lower truncation*)
(*truevals centers around exact answers*)
(**)*)
(*\[Sigma]s=\[Sigma]s1;*)
(*z=Table[{(Log[x[[3]]]-\[Mu]s[[x[[2]]+1]])/\[Sigma]s[[x[[2]]+1]],(Log[x[[4]]]-\[Mu]s[[x[[2]]+1]])/\[Sigma]s[[x[[2]]+1]],x[[5]],x[[2]]+1},{x,f}];*)
(**)
(*cdf[y_]:=CDF[NormalDistribution[0,1],y];*)
(*prob[x_]:=Switch[{x[[1]]<=x[[2]], x[[3]]==0},{True,True}, cdf[(0.5*x[[1]]+0.5*x[[2]])], {True,False},1- cdf[(0.5*x[[1]]+0.5*x[[2]])], {False,True},1- cdf[(0.5*x[[1]]+0.5*x[[2]])], {False,False},cdf[(0.5*x[[1]]+0.5*x[[2]])]] ;*)
(*LLIC[samp_]:=Sum[logprob,{logprob,Table[Log[prob[x]],{x,samp}]}];*)
(*(*ResICwB=Maximize[{LLICwB[b],b>0},{b}]*)*)
(*MaxLLIC=LLIC[z];*)
(*k=0;*)
(*AICIC = k 2-2*MaxLLIC;*)
(*BICIC= k Log[nsamp]-2*MaxLLIC;*)
(**)
(*cdf[y_]:=CDF[NormalDistribution[0,1],y];*)
(*prob[x_,r_]:=Switch[{x[[1]]<=x[[2]], x[[3]]==0},{True,True}, *)
(*r/2+(1-r)cdf[(0.5*x[[1]]+0.5*x[[2]])], {True,False},*)
(*r/2+(1-r)*(1- cdf[(0.5*x[[1]]+0.5*x[[2]])]), {False,True},*)
(*r/2+(1-r)*(1- cdf[(0.5*x[[1]]+0.5*x[[2]])]), {False,False},*)
(*r/2+(1-r)*cdf[(0.5*x[[1]]+0.5*x[[2]])]] ;*)
(*LLICwR[samp_,r_]:=Sum[logprob,{logprob,Table[Log[prob[x,r]],{x,samp}]}];*)
(*ResICwR=Maximize[{LLICwR[z,r],1>r>0},{r}];*)
(*(*AllR=ParallelTable[zboot=RandomChoice[z,{Length[z]}];r/.Maximize[{LLICwR[zboot,r],1>r>0},{r}][[2]],{1000}];*)
(*{Mean[AllR],StandardDeviation[AllR]}*)*)
(*MaxLLICwR=ResICwR[[1]];*)
(*k=1;*)
(*AICICwR = k 2-2*MaxLLICwR;*)
(*BICICwR= k Log[nsamp]-2*MaxLLICwR;*)
(**)
(*cdf[y_]:=CDF[NormalDistribution[0,1],y];*)
(*prob[x_,p_]:=Switch[{x[[1]]<=x[[2]], x[[3]]==0},{True,True}, p+(1-p)*cdf[(0.5*x[[1]]+0.5*x[[2]])], {True,False},1- p-(1-p)*cdf[(0.5*x[[1]]+0.5*x[[2]])], {False,True},p+(1-p)*(1- cdf[(0.5*x[[1]]+0.5*x[[2]])]), {False,False},1-p-(1-p)*(1-cdf[(0.5*x[[1]]+0.5*x[[2]])])] ;*)
(*LLICwP[samp_,p_]:=Sum[logprob,{logprob,Table[Log[prob[x,p]],{x,samp}]}];*)
(*ResICwP=Maximize[{LLICwP[z,p],1>p>0},{p}];*)
(*MaxLLICwP=ResICwP[[1]];*)
(*k=1;*)
(*AICICwP = k 2-2*MaxLLICwP;*)
(*BICICwP= k Log[nsamp]-2*MaxLLICwP;*)
(**)
(*cdf[y_]:=CDF[NormalDistribution[0,1],y];*)
(*prob[x_,p_,r_]:=Switch[{x[[1]]<=x[[2]], x[[3]]==0},{True,True}, r/2+(1-r) (p+(1-p)*cdf[(0.5*x[[1]]+0.5*x[[2]])]), {True,False},r/2+(1-r) (1- p-(1-p)*cdf[(0.5*x[[1]]+0.5*x[[2]])]), {False,True},r/2+(1-r) (p+(1-p)*(1- cdf[(0.5*x[[1]]+0.5*x[[2]])])), {False,False},r/2+(1-r) (1-p-(1-p)*(1-cdf[(0.5*x[[1]]+0.5*x[[2]])]))] ;*)
(*LLICwPR[p_,r_,samp_]:=Sum[logprob,{logprob,Table[Log[prob[x,p,r]],{x,samp}]}];*)
(*ResICwPR=Maximize[{LLICwPR[p,r,z],1>p>0,1>r>0},{r,p}];*)
(*(*AllRP=ParallelTable[zboot=RandomChoice[z,{Length[z]}];{r,p}/.Maximize[{LLICwPR[p,r,zboot],1>p>0,1>r>0},{r,p}][[2]],{1000}];*)
(*Table[{Mean[AllRP[[;;,i]]],StandardDeviation[AllRP[[;;,i]]]},{i,2}]*)
(**)*)
(*MaxLLICwPR=ResICwPR[[1]];*)
(*k=2;*)
(*AICICwPR = k 2-2*MaxLLICwPR;*)
(*BICICwPR= k Log[nsamp]-2*MaxLLICwPR;*)
(**)
(**)
(*PRR=-2 (MaxLLICwR-MaxLLICwPR);*)
(*PRP=-2 (MaxLLICwP-MaxLLICwPR);*)
(*PRNone=-2 (MaxLLIC-MaxLLICwPR);*)
(*(*one additional DOF*)*)
(*prr=1-CDF[ChiSquareDistribution[1],PRR];*)
(*(*one additional DOF*)*)
(*prp=1-CDF[ChiSquareDistribution[1],PRP];*)
(*(*two additional DOFs*)*)
(*prnone=1-CDF[ChiSquareDistribution[2],PRNone];*)
(*rand=r/.ResICwPR[[2,1]];*)
(*par=p/.ResICwPR[[2,2]];*)
(*{ll,probdata}=bootstrap[prob[#1,par,rand]&,LLICwPR[par,rand,#1]&,z,1000,MaxLLICwPR];*)
(*data={{"P-val_data","PRvsR","PRvsP","PRvsInitialGuess"},{probdata,prr,prp,prnone}};*)
(*Print[data];*)
(*Export["~/Dropbox/ExpFiles/"<>rank<>"RankedExperiment_"<>{"Mu","True"}[[mu]]<>"_"<>{"AllQ","Q>4","Q<4"}[[ff]]<>".csv",data];*)
(*,{mu,2}*)
(*,{ff,3}];*)
(*,{rank,{"","un"}}]*)
(**)











